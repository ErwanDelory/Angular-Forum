{"version":3,"sources":["C:/Users/erwan/Google Drive/Polytech/4ème année/Semestre 8/JIN81H - Applications web et mobiles/TP/forum-angular/node_modules/@ckeditor/ckeditor5-angular/fesm2015/ckeditor-ckeditor5-angular.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6TC,4BAkBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAgBA;;;;;;;;;CAOD;;;;;;;;;0BAOC","file":"ckeditor-ckeditor5-angular.js","sourcesContent":["import { Component, Input, Output, NgZone, EventEmitter, forwardRef, ElementRef, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n/**\n * Basic typings for the CKEditor5 elements.\n */\nvar CKEditor5;\n(function (CKEditor5) {\n    /**\n     * The CKEditor5 editor constructor.\n     * @record\n     */\n    function EditorConstructor() { }\n    CKEditor5.EditorConstructor = EditorConstructor;\n    /**\n     * The CKEditor5 editor config.\n     * @record\n     */\n    function Config() { }\n    CKEditor5.Config = Config;\n    /**\n     * The event object passed to CKEditor5 event callbacks.\n     *\n     * See https://ckeditor.com/docs/ckeditor5/latest/api/module_utils_eventinfo-EventInfo.html\n     * @record\n     * @template EventName\n     */\n    function EventInfo() { }\n    CKEditor5.EventInfo = EventInfo;\n    /**\n     * The base Editor class.\n     *\n     * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html\n     * @record\n     */\n    function BaseEditor() { }\n    CKEditor5.BaseEditor = BaseEditor;\n    /**\n     * The CKEditor5 DataApi interface.\n     *\n     * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_utils_dataapimixin-DataApi.html.\n     * @record\n     */\n    function DataApi() { }\n    CKEditor5.DataApi = DataApi;\n    /**\n     * A CKEditor5 editor that implements the\n     * [DataApi interface](https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_utils_dataapimixin-DataApi.html).\n     * E.g. the `ClassicEditor`, `InlineEditor`, etc.\n     * @record\n     */\n    function Editor() { }\n    CKEditor5.Editor = Editor;\n})(CKEditor5 || (CKEditor5 = {}));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CKEditorComponent {\n    /**\n     * @param {?} elementRef\n     * @param {?} ngZone\n     */\n    constructor(elementRef, ngZone) {\n        /**\n         * The configuration of the editor.\n         * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editorconfig-EditorConfig.html\n         * to learn more.\n         */\n        this.config = {};\n        /**\n         * The initial data of the editor. Useful when not using the ngModel.\n         * See https://angular.io/api/forms/NgModel to learn more.\n         */\n        this.data = '';\n        /**\n         * Tag name of the editor component.\n         *\n         * The default tag is 'div'.\n         */\n        this.tagName = 'div';\n        /**\n         * Fires when the editor is ready. It corresponds with the `editor#ready`\n         * https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#event-ready\n         * event.\n         */\n        this.ready = new EventEmitter();\n        /**\n         * Fires when the content of the editor has changed. It corresponds with the `editor.model.document#change`\n         * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_model_document-Document.html#event-change\n         * event.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Fires when the editing view of the editor is blurred. It corresponds with the `editor.editing.view.document#blur`\n         * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:blur\n         * event.\n         */\n        this.blur = new EventEmitter();\n        /**\n         * Fires when the editing view of the editor is focused. It corresponds with the `editor.editing.view.document#focus`\n         * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:focus\n         * event.\n         */\n        this.focus = new EventEmitter();\n        /**\n         * The instance of the editor created by this component.\n         */\n        this.editorInstance = null;\n        /**\n         * If the component is read–only before the editor instance is created, it remembers that state,\n         * so the editor can become read–only once it is ready.\n         */\n        this.initialIsDisabled = false;\n        /**\n         * A lock flag preventing from calling the `cvaOnChange()` during setting editor data.\n         */\n        this.isEditorSettingData = false;\n        this.ngZone = ngZone;\n        this.elementRef = elementRef;\n    }\n    /**\n     * When set `true`, the editor becomes read-only.\n     * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#member-isReadOnly\n     * to learn more.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    set disabled(isDisabled) {\n        this.setDisabledState(isDisabled);\n    }\n    /**\n     * @return {?}\n     */\n    get disabled() {\n        if (this.editorInstance) {\n            return this.editorInstance.isReadOnly;\n        }\n        return this.initialIsDisabled;\n    }\n    // Implementing the AfterViewInit interface.\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this.ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            this.createEditor();\n        }));\n    }\n    // Implementing the OnDestroy interface.\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.editorInstance) {\n            this.editorInstance.destroy();\n            this.editorInstance = null;\n        }\n    }\n    // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        // This method is called with the `null` value when the form resets.\n        // A component's responsibility is to restore to the initial state.\n        if (value === null) {\n            value = '';\n        }\n        // If already initialized.\n        if (this.editorInstance) {\n            // The lock mechanism prevents from calling `cvaOnChange()` during changing\n            // the editor state. See #139\n            this.isEditorSettingData = true;\n            this.editorInstance.setData(value);\n            this.isEditorSettingData = false;\n        }\n        // If not, wait for it to be ready; store the data.\n        else {\n            this.data = value;\n            // If the editor element is already available, then update its content.\n            // If the ngModel is used then the editor element should be updated directly here.\n            if (this.editorElement) {\n                this.editorElement.innerHTML = this.data;\n            }\n        }\n    }\n    // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    registerOnChange(callback) {\n        this.cvaOnChange = callback;\n    }\n    // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    registerOnTouched(callback) {\n        this.cvaOnTouched = callback;\n    }\n    // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        // If already initialized\n        if (this.editorInstance) {\n            this.editorInstance.isReadOnly = isDisabled;\n        }\n        // If not, wait for it to be ready; store the state.\n        else {\n            this.initialIsDisabled = isDisabled;\n        }\n    }\n    /**\n     * Creates the editor instance, sets initial editor data, then integrates\n     * the editor with the Angular component. This method does not use the `editor.setData()`\n     * because of the issue in the collaboration mode (#6).\n     * @private\n     * @return {?}\n     */\n    createEditor() {\n        /** @type {?} */\n        const element = document.createElement(this.tagName);\n        this.editorElement = element;\n        if (this.data && this.config.initialData) {\n            throw new Error('Editor data should be provided either using `config.initialData` or `data` properties.');\n        }\n        // Merge two possible ways of providing data into the `config.initialData` field.\n        /** @type {?} */\n        const config = Object.assign({}, this.config, { initialData: this.config.initialData || this.data || '' });\n        this.elementRef.nativeElement.appendChild(element);\n        return (/** @type {?} */ (this.editor)).create(element, config)\n            .then((/**\n         * @param {?} editor\n         * @return {?}\n         */\n        editor => {\n            this.editorInstance = editor;\n            if (this.initialIsDisabled) {\n                editor.isReadOnly = this.initialIsDisabled;\n            }\n            this.ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                this.ready.emit(editor);\n            }));\n            this.setUpEditorEvents(editor);\n        }))\n            .catch((/**\n         * @param {?} err\n         * @return {?}\n         */\n        (err) => {\n            console.error(err.stack);\n        }));\n    }\n    /**\n     * Integrates the editor with the component by attaching related event listeners.\n     * @private\n     * @param {?} editor\n     * @return {?}\n     */\n    setUpEditorEvents(editor) {\n        /** @type {?} */\n        const modelDocument = editor.model.document;\n        /** @type {?} */\n        const viewDocument = editor.editing.view.document;\n        modelDocument.on('change:data', (/**\n         * @param {?} evt\n         * @return {?}\n         */\n        (evt) => {\n            this.ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                if (this.cvaOnChange && !this.isEditorSettingData) {\n                    /** @type {?} */\n                    const data = editor.getData();\n                    this.cvaOnChange(data);\n                }\n                this.change.emit({ event: evt, editor });\n            }));\n        }));\n        viewDocument.on('focus', (/**\n         * @param {?} evt\n         * @return {?}\n         */\n        (evt) => {\n            this.ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                this.focus.emit({ event: evt, editor });\n            }));\n        }));\n        viewDocument.on('blur', (/**\n         * @param {?} evt\n         * @return {?}\n         */\n        (evt) => {\n            this.ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                if (this.cvaOnTouched) {\n                    this.cvaOnTouched();\n                }\n                this.blur.emit({ event: evt, editor });\n            }));\n        }));\n    }\n}\nCKEditorComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'ckeditor',\n                template: '<ng-template></ng-template>',\n                // Integration with @angular/forms.\n                providers: [\n                    {\n                        provide: NG_VALUE_ACCESSOR,\n                        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                        useExisting: forwardRef((/**\n                         * @return {?}\n                         */\n                        () => CKEditorComponent)),\n                        multi: true,\n                    }\n                ]\n            }] }\n];\n/** @nocollapse */\nCKEditorComponent.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone }\n];\nCKEditorComponent.propDecorators = {\n    editor: [{ type: Input }],\n    config: [{ type: Input }],\n    data: [{ type: Input }],\n    tagName: [{ type: Input }],\n    disabled: [{ type: Input }],\n    ready: [{ type: Output }],\n    change: [{ type: Output }],\n    blur: [{ type: Output }],\n    focus: [{ type: Output }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CKEditorModule {\n}\nCKEditorModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [FormsModule, CommonModule],\n                declarations: [CKEditorComponent],\n                exports: [CKEditorComponent]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { CKEditorComponent, CKEditorModule };\n"]}